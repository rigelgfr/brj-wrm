generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String    @unique @db.VarChar(255)
  username              String    @unique @db.VarChar(50)
  password              String    @db.VarChar(255)
  createdAt             DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  role                  String?   @db.VarChar(15)
  role_users_roleTorole role?     @relation("users_roleTorole", fields: [role], references: [role], onDelete: NoAction, onUpdate: NoAction, map: "fk_role")

  @@map("users")
}

model warehouses {
  wh_name             String                @id
  wh_type             String?               @unique
  space               Int?
  max_cap_sqm         Int?
  max_cap_vol         Int?
  inbound             inbound[]
  inbound_aggregated  inbound_aggregated[]
  occupancy_sqm       occupancy_sqm[]
  occupancy_vol       occupancy_vol[]
  outbound            outbound[]
  outbound_aggregated outbound_aggregated[]
}

model inbound {
  no               Int         @id @default(autoincrement())
  wh_name          String?
  area             String?
  inbound_date     DateTime?   @db.Date
  gate_in          DateTime?   @db.Time(6)
  inbound_doc_type String?     @db.VarChar(255)
  inbound_doc      String?     @db.VarChar(255)
  receiving_doc    String?     @db.VarChar(255)
  customer_name    String?     @db.VarChar(255)
  shipper_name     String?     @db.VarChar(255)
  bl_do            String?     @db.VarChar(255)
  aju_no           String?     @db.VarChar(255)
  truck_type       String?     @db.VarChar(255)
  plat_no          String?     @db.VarChar(255)
  container_no     String?     @db.VarChar(255)
  seal_no          String?     @db.VarChar(255)
  item_code        String?     @db.VarChar(255)
  item_name        String?     @db.VarChar(255)
  qty              Int?
  uom              String?     @db.VarChar(50)
  nett_weight      Decimal?    @db.Decimal(15, 3)
  gross_weight     Decimal?    @db.Decimal(15, 3)
  volume           Decimal?    @db.Decimal(15, 3)
  batch            String?
  npe_no           String?     @db.VarChar(255)
  npe_date         DateTime?   @db.Date
  peb_no           String?     @db.VarChar(255)
  peb_date         DateTime?   @db.Date
  remark           String?     @db.VarChar(255)
  dock_no          String?     @db.VarChar(255)
  doc_status       String?     @db.VarChar(255)
  user_admin       String?     @db.VarChar(255)
  start_tally      DateTime?   @db.Timestamp(6)
  finish_tally     DateTime?   @db.Timestamp(6)
  user_tally       String?     @db.VarChar(255)
  start_putaway    DateTime?   @db.Timestamp(6)
  finish_putaway   DateTime?   @db.Timestamp(6)
  user_putaway     String?     @db.VarChar(255)
  year             Int?        @default(dbgenerated("EXTRACT(year FROM inbound_date)"))
  month            String?     @default(dbgenerated("get_month_name(inbound_date)"))
  week_no          String?     @default(dbgenerated("get_week_number(inbound_date)"))
  id               String?     @default(dbgenerated("generate_in_id((plat_no)::text, (container_no)::text, inbound_date)"))
  week_in_month    String?     @default(dbgenerated("get_week_in_month(inbound_date)"))
  leadtime_put     Float?      @default(dbgenerated("(EXTRACT(epoch FROM (finish_putaway - start_putaway)) / (60)::numeric)"))
  leadtime_unload  Float?      @default(dbgenerated("(EXTRACT(epoch FROM (finish_tally - start_tally)) / (60)::numeric)"))
  months           months?     @relation(fields: [month], references: [month_full], onDelete: NoAction, onUpdate: NoAction, map: "fk_inbound_month")
  warehouses       warehouses? @relation(fields: [area], references: [wh_name], onDelete: NoAction, onUpdate: NoAction, map: "fk_inbound_area")
  years            years?      @relation(fields: [year], references: [year], onDelete: NoAction, onUpdate: NoAction, map: "fk_inbound_year")
}

model months {
  month               String                @id @db.VarChar(3)
  month_full          String?               @unique
  sort                Int?
  inbound             inbound[]
  inbound_aggregated  inbound_aggregated[]
  occupancy           occupancy[]
  occupancy_sqm       occupancy_sqm[]
  occupancy_vol       occupancy_vol[]
  outbound            outbound[]
  outbound_aggregated outbound_aggregated[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model occupancy_sqm {
  year       Int
  month      String     @db.VarChar(3)
  week       String     @db.VarChar(2)
  wh_type    String
  status     String
  space      Int?
  months     months     @relation(fields: [month], references: [month], onDelete: Cascade, onUpdate: NoAction, map: "fk_month")
  weeks      weeks      @relation(fields: [week], references: [week], onDelete: Cascade, onUpdate: NoAction, map: "fk_week")
  warehouses warehouses @relation(fields: [wh_type], references: [wh_type], onDelete: Cascade, onUpdate: NoAction, map: "fk_wh_type")
  years      years      @relation(fields: [year], references: [year], onDelete: Cascade, onUpdate: NoAction, map: "fk_year")

  @@id([year, month, week, wh_type, status])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model occupancy_vol {
  year       Int
  month      String     @db.VarChar(3)
  week       String     @db.VarChar(2)
  wh_type    String
  status     String
  space      Int?
  months     months     @relation(fields: [month], references: [month], onDelete: Cascade, onUpdate: NoAction, map: "fk_month")
  weeks      weeks      @relation(fields: [week], references: [week], onDelete: Cascade, onUpdate: NoAction, map: "fk_week")
  warehouses warehouses @relation(fields: [wh_type], references: [wh_type], onDelete: Cascade, onUpdate: NoAction, map: "fk_wh_type")
  years      years      @relation(fields: [year], references: [year], onDelete: Cascade, onUpdate: NoAction, map: "fk_year")

  @@id([year, month, week, wh_type, status])
}

model outbound {
  no                Int         @id @default(autoincrement())
  wh_name           String?
  area              String?
  outbound_date     DateTime?   @db.Date
  outbound_time     DateTime?   @db.Time(6)
  loading_date      DateTime?   @db.Date
  outbound_doc_type String?     @db.VarChar(255)
  outbound_doc      String?     @db.VarChar(255)
  picking_doc       String?     @db.VarChar(255)
  loading_doc       String?     @db.VarChar(255)
  customer_name     String?     @db.VarChar(255)
  shipper_name      String?     @db.VarChar(255)
  item_code         String?     @db.VarChar(255)
  item_name         String?     @db.VarChar(255)
  doc_qty           Int?
  qty               Int?
  uom               String?     @db.VarChar(50)
  nett_weight       Decimal?    @db.Decimal(15, 3)
  gross_weight      Decimal?    @db.Decimal(15, 3)
  volume            Decimal?    @db.Decimal(15, 3)
  batch             String?
  bl_do             String?     @db.VarChar(255)
  aju_no            String?     @db.VarChar(255)
  truck_type        String?     @db.VarChar(255)
  truck_no          String?     @db.VarChar(255)
  container_no      String?     @db.VarChar(255)
  seal_no           String?     @db.VarChar(255)
  vessel_name       String?     @db.VarChar(255)
  voyage_no         String?     @db.VarChar(255)
  destination       String?     @db.VarChar(255)
  recipient         String?     @db.VarChar(255)
  address           String?     @db.VarChar(255)
  shipping_notes    String?     @db.VarChar(255)
  remark            String?     @db.VarChar(255)
  doc_status        String?     @db.VarChar(255)
  user_admin        String?     @db.VarChar(255)
  start_picking     DateTime?   @db.Timestamp(6)
  finish_picking    DateTime?   @db.Timestamp(6)
  user_picking      String?     @db.VarChar(255)
  start_loading     DateTime?   @db.Timestamp(6)
  finish_loading    DateTime?   @db.Timestamp(6)
  user_loading      String?     @db.VarChar(255)
  id                String?     @default(dbgenerated("generate_out_id((truck_no)::text, (container_no)::text, outbound_date)"))
  year              Int?        @default(dbgenerated("EXTRACT(year FROM outbound_date)"))
  month             String?     @default(dbgenerated("get_month_name(outbound_date)"))
  week_no           String?     @default(dbgenerated("get_week_number(outbound_date)"))
  week_in_month     String?     @default(dbgenerated("get_week_in_month(outbound_date)"))
  leadtime_picking  Float?      @default(dbgenerated("(EXTRACT(epoch FROM (finish_picking - start_picking)) / (60)::numeric)"))
  leadtime_load     Float?      @default(dbgenerated("(EXTRACT(epoch FROM (finish_loading - start_loading)) / (60)::numeric)"))
  months            months?     @relation(fields: [month], references: [month_full], onDelete: NoAction, onUpdate: NoAction, map: "fk_outbound_month")
  warehouses        warehouses? @relation(fields: [area], references: [wh_name], onDelete: NoAction, onUpdate: NoAction, map: "fk_outbound_area")
  years             years?      @relation(fields: [year], references: [year], onDelete: NoAction, onUpdate: NoAction, map: "fk_outbound_year")
}

model weeks {
  week                String                @id @db.VarChar(2)
  inbound_aggregated  inbound_aggregated[]
  occupancy           occupancy[]
  occupancy_sqm       occupancy_sqm[]
  occupancy_vol       occupancy_vol[]
  outbound_aggregated outbound_aggregated[]
}

model years {
  year                Int                   @id
  inbound             inbound[]
  inbound_aggregated  inbound_aggregated[]
  occupancy           occupancy[]
  occupancy_sqm       occupancy_sqm[]
  occupancy_vol       occupancy_vol[]
  outbound            outbound[]
  outbound_aggregated outbound_aggregated[]
}

model inbound_aggregated {
  warehouse          String
  year               Int
  month              String
  week_in_month      String
  total_volume       Decimal?   @db.Decimal
  unique_truck_count Int?
  total_truck_count  Int?
  total_volume_int   Int?       @default(dbgenerated("(total_volume)::integer"))
  wh_type            String?    @default(dbgenerated("\nCASE\n    WHEN (warehouse = 'CFS'::text) THEN 'CFS'::text\n    WHEN (warehouse = 'FREEZONE AB'::text) THEN 'FZ AB'::text\n    WHEN (warehouse = 'FREEZONE BRJ'::text) THEN 'FZ BRJ'::text\n    WHEN (warehouse = 'PLB'::text) THEN 'PLB'::text\n    WHEN (warehouse = 'GB'::text) THEN 'Bonded'::text\n    ELSE 'Other'::text\nEND"))
  months             months     @relation(fields: [month], references: [month_full], onDelete: Cascade, onUpdate: NoAction, map: "fk_month")
  warehouses         warehouses @relation(fields: [warehouse], references: [wh_name], onDelete: Cascade, onUpdate: NoAction, map: "fk_warehouse")
  weeks              weeks      @relation(fields: [week_in_month], references: [week], onDelete: Cascade, onUpdate: NoAction, map: "fk_week")
  years              years      @relation(fields: [year], references: [year], onDelete: Cascade, onUpdate: NoAction, map: "fk_year")

  @@id([warehouse, year, month, week_in_month])
}

model outbound_aggregated {
  warehouse          String
  year               Int
  month              String
  week_in_month      String
  total_volume       Decimal?   @db.Decimal
  unique_truck_count Int?
  total_truck_count  Int?
  total_volume_int   Int?       @default(dbgenerated("(total_volume)::integer"))
  wh_type            String?    @default(dbgenerated("\nCASE\n    WHEN (warehouse = 'CFS'::text) THEN 'CFS'::text\n    WHEN (warehouse = 'FREEZONE AB'::text) THEN 'FZ AB'::text\n    WHEN (warehouse = 'FREEZONE BRJ'::text) THEN 'FZ BRJ'::text\n    WHEN (warehouse = 'PLB'::text) THEN 'PLB'::text\n    WHEN (warehouse = 'GB'::text) THEN 'Bonded'::text\n    ELSE 'Other'::text\nEND"))
  months             months     @relation(fields: [month], references: [month_full], onDelete: Cascade, onUpdate: NoAction, map: "fk_month")
  warehouses         warehouses @relation(fields: [warehouse], references: [wh_name], onDelete: Cascade, onUpdate: NoAction, map: "fk_warehouse")
  weeks              weeks      @relation(fields: [week_in_month], references: [week], onDelete: Cascade, onUpdate: NoAction, map: "fk_week")
  years              years      @relation(fields: [year], references: [year], onDelete: Cascade, onUpdate: NoAction, map: "fk_year")

  @@id([warehouse, year, month, week_in_month])
}

model occupancy {
  year           Int
  month          String         @db.VarChar(3)
  week           String         @db.VarChar(2)
  wh_type        String         @db.VarChar(10)
  section        String         @db.VarChar(10)
  occupied_sqm   Int?
  occupied_vol   Int?
  empty_sqm      Int?
  months         months         @relation(fields: [month], references: [month], onDelete: NoAction, onUpdate: NoAction)
  weeks          weeks          @relation(fields: [week], references: [week], onDelete: NoAction, onUpdate: NoAction)
  warehouse_type warehouse_type @relation(fields: [wh_type, section], references: [wh_type, section], onDelete: NoAction, onUpdate: NoAction)
  years          years          @relation(fields: [year], references: [year], onDelete: NoAction, onUpdate: NoAction)

  @@id([year, month, week, wh_type, section])
}

model warehouse_area {
  area    String @db.VarChar(10)
  wh_type String @db.VarChar(10)

  @@id([area, wh_type])
}

model warehouse_type {
  wh_type   String      @db.VarChar(10)
  section   String      @db.VarChar(10)
  space     Int?
  occupancy occupancy[]

  @@id([wh_type, section], map: "pk_warehouse_type")
}

model role {
  role                   String @id @db.VarChar(15)
  users_users_roleTorole User[] @relation("users_roleTorole")
}
